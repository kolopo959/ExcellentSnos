import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
import sqlite3
from database.base import *
from pyCryptoPayAPI import pyCryptoPayAPI
import json
import requests
import random
import time
import config as cfg


subscribers = {}

conn = sqlite3.connect('subscription.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        expiration_date TEXT
    )
''')
conn.commit()

crypto = pyCryptoPayAPI(api_token="279955:AAKLMAGCHkua2IKKdl6aLp93yOA8PJkusBk")

bot_token = '7854885401:AAG-uZYw0TpATB2YAYoHib7kaAdbZfy7Dxs'
owner_id = 6844417408
channel_id = '-1002498256555'  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
channel_username = 'ExcellentSnos'  # –ò–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ "@"
name_bot = 'ExcelentSnosBot'
bot = telebot.TeleBot(bot_token)
admins = [7502169904]
last_raid_time = {}








def load_users():
    try:
        with open('users.txt', 'r') as file:
            return [int(line.strip()) for line in file]
    except FileNotFoundError:
        return []

def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open('users.txt', 'w') as file:
            file.write('\n'.join(str(user) for user in users))


def create_users_table(cursor):
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            last_interaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
        )
    ''')

def update_database():
    with sqlite3.connect('database.db') as connection:
        cursor = connection.cursor()

        # Create the users table if it doesn't exist
        create_users_table(cursor)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ last_interaction
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]
        if "last_interaction" not in columns:
            cursor.execute('''
                ALTER TABLE users ADD COLUMN last_interaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
            ''')
            connection.commit()

update_database()


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if message.text == '/start':
        save_user(user_id)
    user_id = message.from_user.id
    is_subscribed = False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with sqlite3.connect('subscriptions.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT expiration_date FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()

    if result:
        expiration_date = datetime.strptime(result[0], "%Y-%m-%d").date()
        if expiration_date >= datetime.now().date():
            is_subscribed = True

    if is_subscribed:

        photo_path = 'net.jpg'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)

        btn_report = telebot.types.InlineKeyboardButton(callback_data='report', text='üö® –†–µ–ø–æ—Ä—Ç–µ—Ä')
        btn_account = telebot.types.InlineKeyboardButton(callback_data='account', text='üíª –ü—Ä–æ—Ñ–∏–ª—å')
        btn_info = telebot.types.InlineKeyboardButton(callback_data='info', text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

        markup.add(btn_report)
        markup.row(btn_account, btn_info)

        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo,
                           caption='''`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–Ω–æ—Å–∞ –ö–∞–Ω–∞–ª–æ–≤, –ë–æ—Ç–æ–≤, –ß–∞—Ç–æ–≤, –µ–±–Ω–∏ —Å–≤–æ–µ–≥–æ –æ–±–∏–¥—á–∏–∫–∞!`''',
                           reply_markup=markup, parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        invoice = crypto.create_invoice(asset='USDT', amount=4.3)
        pay_url = invoice['pay_url']
        invoice_id = invoice['invoice_id']
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É (4.3$)", url=pay_url))
        keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_status_{invoice_id}"))

        photo_path = 'net1.png'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo,
                           caption=f"–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é!\nExcelentSnos —Å–Ω–æ—Å–µ—Ä –±–æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è! –æ—Ç–ª–µ—Ç–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–π!n–ü–ï–†–ï–î –ò–°–ü–û–õ–¨–ó–û–í–ù–ò–ï–ú –ù–ê–ñ–ú–ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø!",
                           reply_markup=keyboard),


@bot.callback_query_handler(func=lambda c: c.data.startswith('check_status'))
def check_status(callback_query):
    invoice_id = callback_query.data.split('_')[2]
    old_invoice = crypto.get_invoices(invoice_ids=invoice_id)
    status_old_invoice = old_invoice['items'][0]['status']
    user_id = callback_query.from_user.id

    if status_old_invoice == "paid":
        bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        with sqlite3.connect('subscriptions.db') as conn:
            cursor = conn.cursor()
            expiration_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π
            cursor.execute('INSERT OR REPLACE INTO users (user_id, expiration_date) VALUES (?, ?)', (user_id, expiration_date))
            conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
        bot.send_message(user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    elif status_old_invoice == "active":
        bot.send_message(user_id, f"–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!")
    else:
        bot.send_message(user_id, f"–°—á–µ—Ç {invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")




@bot.callback_query_handler(func=lambda call: call.data == "info")
def info(call):
    message_text = "*ExcellentSnos* - `—ç—Ç–æ –£–ù–ò–ö–ê–õ–¨–ù–´–ô –±–æ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã –≤–∞—à–∏—Ö –æ–±–∏–¥—á–∏–∫–æ–≤!`"
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.InlineKeyboardMarkup()
    btn_channel = types.InlineKeyboardButton(callback_data='channel', text='üîã –ö–∞–Ω–∞–ª')
    btn_support = types.InlineKeyboardButton(callback_data='support', text='üÜò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    btn_back = types.InlineKeyboardButton(callback_data='back', text='‚ÜñÔ∏è –ù–∞–∑–∞–¥')

    keyboard.row(btn_channel, btn_support)
    keyboard.row(btn_back)

    bot.send_message(call.message.chat.id, message_text, reply_markup=keyboard, parse_mode="Markdown")


    @bot.callback_query_handler(func=lambda call: call.data == "channel")
    def channel(call):
        markup = telebot.types.InlineKeyboardMarkup()
        btn_subscribe = telebot.types.InlineKeyboardButton(text='üåê –ö–∞–Ω–∞–ª —Å –ù–æ–≤–æ—Å—Ç—è–º–∏', url='https://t.me/ExcellentSnos')
        markup.add(btn_subscribe)
        bot.send_message(call.message.chat.id, '–ù–∞—à –∫–∞–Ω–∞–ª:', reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "support")
    def support(call):
        markup = telebot.types.InlineKeyboardMarkup()
        btn_subscribe = telebot.types.InlineKeyboardButton(text='‚ö†Ô∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', url='https://t.me/ExcellentSnosInfo')
        markup.add(btn_subscribe)
        bot.send_message(call.message.chat.id, '–ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:', reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "back")
    def back(call):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        btn_report = telebot.types.InlineKeyboardButton(callback_data='report', text='üö® –°–Ω–æ—Å')
        btn_account = telebot.types.InlineKeyboardButton(callback_data='account', text='üíª –ü—Ä–æ—Ñ–∏–ª—å')
        btn_info = telebot.types.InlineKeyboardButton(callback_data='info', text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        markup.add(btn_report, btn_account, btn_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        photo_path = 'net.jpg'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        with open(photo_path, 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "account")
def account(call):
    user_id = call.from_user.id
    user_first_name = call.from_user.first_name
    user_last_name = call.from_user.last_name
    user_username = call.from_user.username

    with sqlite3.connect('subscriptions.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT expiration_date FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()

    if result:
        expiration_date = datetime.strptime(result[0], "%Y-%m-%d").date()
        days_left = (expiration_date - datetime.now().date()).days

        message = f'''üíª –ü—Ä–æ—Ñ–∏–ª—å:

üìá –î–∞–Ω–Ω—ã–µ: `{user_id} | @{user_username}`
‚è≥–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: `{days_left}`

üï∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: `{expiration_date}`
'''

        bot.send_message(call.message.chat.id, message, parse_mode="Markdown")  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä parse_mode="Markdown"
    else:
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")



def update_subscription(user_id, days):
    current_date = datetime.now().date()
    new_expiration_date = current_date + timedelta(days=days)

    with sqlite3.connect('subscriptions.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, expiration_date) VALUES (?, ?)
            ''', (user_id, new_expiration_date.strftime('%Y-%m-%d')))

@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    if user_id in admins:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing'))
        bot.send_message(user_id, f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!</b>\n\nüë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(load_users())}</code>", parse_mode='HTML', reply_markup=keyboard)
    else:
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

@bot.callback_query_handler(func=lambda call: call.data == 'mailing' and call.from_user.id in admins)
def mailing_callback(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üì£ | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    bot.register_next_step_handler(call.message, mailing_process)

def mailing_process(message):
    text = message.text
    users = load_users()
    sent_count = 0
    for user_id in users:
        try:
            bot.send_message(user_id, text)
            sent_count += 1
        except:
            pass
    bot.send_message(message.from_user.id, f"üì£ | <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–ú—ã —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", parse_mode='HTML')


@bot.message_handler(commands=['givesub'])
def grant_subscription(message):
    if message.from_user.id == owner_id:
        try:
            command_parts = message.text.split()
            if len(command_parts) == 3:
                user_id = int(command_parts[1])
                days = int(command_parts[2])

                update_subscription(user_id, days)
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π!")
                bot.send_message(user_id, f" ‚úÖ | –í–∞–º –≤—ã–¥–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É {days} –î–Ω–µ–π!")

            else:
                bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /givesub user_id days")
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")


@bot.message_handler(commands=['demote'])
def demote_user(message):
    try:
        user_id_to_demote = int(message.text.split()[1])
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ê–π–¥–∏")
        return

    # Assuming you have defined bot and imported sqlite3 properly

    with sqlite3.connect('subscriptions.db') as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id_to_demote,))
        conn.commit()

    bot.send_message(message.chat.id,
                     f"–ü–æ–¥–ø–∏—Å–∫–∞ —É {user_id_to_demote} –∑–∞–±—Ä–∞–Ω–∞ ")

    # Send message to the user whose subscription has been revoked
    bot.send_message(user_id_to_demote,
                     f" ‚ùå | –£ –≤–∞—Å –ó–∞–±—Ä–∞–ª–∏ –ü–æ–¥–ø–∏—Å–∫—É!\n–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º, –æ—Ç–ø–∏—à–∏—Ç–µ: @mirai_mudro")


@bot.message_handler(commands=['bot'])
def help(message):
    bot.send_message(message.chat.id, "–§–ª—É–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /raid\n–ü—Ä–∏–º–µ—Ä\n/raid –ü–† –ü–† –ü–†")
    if message.chat.id == cfg.admin or cfg.admin2:
        bot.send_message(message.chat.id,
                         "–ù–∞–ø–∏—à–∏ /raid –≤ –≥—Ä—É–ø–ø–µ –∏ —è –Ω–∞—á–Ω—É —Ä–µ–π–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –≤–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –ª–∏–±–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É")
        bot.reply_to(message, "–£–¥–∞—á–Ω–æ–≥–æ –≤–∞–º —Ä–µ–π–¥–∞! üòÅ")



@bot.message_handler(func=lambda message: message.text.startswith('/raid'))
def process_raid(message):
    raid_text = message.text[6:]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–π–¥–∞, –∏—Å–∫–ª—é—á–∞—è "/raid " –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    for i in range(100):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Ä–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        bot.send_message(message.chat.id, raid_text)

@bot.message_handler(commands=['stopraid'])
def stop_raid(message):
    if message.chat.id in last_raid_time:
        del last_raid_time[message.chat.id]  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /raid
        bot.send_message(message.chat.id, "–†–µ–π–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# Adding the main logic for sending reports
# Adding the main logic for sending reports
@bot.callback_query_handler(func=lambda call: call.data == "report")
def report(call):
    markup = telebot.types.InlineKeyboardMarkup()
    for i, subject in enumerate(subjects):
        btn_report_type = telebot.types.InlineKeyboardButton(callback_data=f'report_type_{i}', text=subject)
        markup.add(btn_report_type)

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∞–ª–æ–±—ã:", reply_markup=markup)

sent_messages = 0
failed_messages = 0

@bot.callback_query_handler(func=lambda call: call.data.startswith("report_type"))
def report_type_selected(call):
    try:
        report_type_index = int(call.data.split("_")[2])
        report_type = subjects[report_type_index]
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∂–∞–ª–æ–±—ã: {report_type}")
        bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–∞—é—â–∏–π –∫–∞–Ω–∞–ª:\n–ï—Å–ª–∏ –≤—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å—Å—ã–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/ \n –¢–æ –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É")

        subscribers[call.message.chat.id] = {"report_type": report_type}
        bot.register_next_step_handler(call.message, handle_report_link)



    except (IndexError, ValueError) as e:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∞–ª–æ–±—ã —Å–Ω–æ–≤–∞.")



def handle_report_link(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    link = message.text
    report_type = subscribers[chat_id]["report_type"]


def handle_report_link(message):
    global sent_messages, failed_messages  # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    chat_id = message.chat.id
    user_id = message.from_user.id
    link = message.text
    report_type = subscribers[chat_id]["report_type"]

    if report_type == '–î–ï–ê–ù–û–ù':
        text = f" –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –í –∫–∞–Ω–∞–ª–µ —Å–ª–∏–≤–∞—é—Ç—Å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö/–¥–µ–∞–Ω–æ–Ω—ã.–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—ã/–ø–æ—Å—Ç"
    elif report_type == '–°–í–ê–¢–ò–ù–ì':
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –°–≤–∞—Ç–∏–Ω–≥–æ–º –ª—é–¥–µ–π –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö/–¥–µ–∞–Ω–æ–Ω—ã.–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—ã/–ø–æ—Å—Ç"
    elif report_type == '–†–ê–°–ü–†–ê–í–´':
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–†–∞—Å–ø—Ä–∞–≤—ã\n–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—ã/–ø–æ—Å—Ç"
    elif report_type == '–ü–û–†–ù–û':
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è\n–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—ã/–ø–æ—Å—Ç"
    elif report_type == '–ù–ê–ö–†–£–¢–ö–ê':
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ —Å–¥–µ–ª–∞–ª —Å–µ–±–µ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, —á—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∫—Ä—É—Ç–∫–æ–π –ª—é–¥–µ–π\n–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—ã/–ø–æ—Å—Ç"
    elif report_type == '–°–ù–û–° –ü–†–ê–ô–°–ê':
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–î–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ–¥–∞–µ—Ç –≤ —Å–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏, –∞ –∏–º–µ–Ω–Ω–æ:\n–î–µ–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏\n–°–≤–∞—Ç–∏–Ω–≥ –ª–∏—á–Ω–æ—Å—Ç–∏\n–ü—Ä–æ–¥–∞–∂–∞ –º–∞–Ω—É–∞–ª–æ–≤ –ø–æ –î–µ–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏, –°–≤–∞—Ç–∏–Ω–≥—É\n–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—ã/–ø–æ—Å—Ç\n–ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º –ö–∞–Ω–∞–ª"
    elif report_type == '–ù–ê–†–ö0–¢–ò–ö–ò':
        text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–µ—Ç –≤ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞\n–ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º –ö–∞–Ω–∞–ª'
    elif report_type == '–°–ù–û–° –ê–ö–ê–£–ù–¢–ê –ó–ê –í–ò–†–¢ –ù–û–ú–ï–†':
        text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∞–∫–∞—É–Ω—Ç–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è:\n–î–∞–Ω–Ω—ã–π –∞–∫–∞—É–Ω—Ç —Å–∏–¥–∏—Ç –Ω–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ê —Å –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç –æ–Ω —Å–∞–º\n–ü—Ä–æ—à—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º –ê–∫–∞—É–Ω—Ç'
    elif report_type == '–°–ù–û–° –ê–ö–ê–£–ù–¢–ê –ó–ê –î–ï–ê–ù–û–ù/–°–í–ê–¢':
        text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç: {link}\n–ü—Ä–æ–¥–∞–µ—Ç —É—Å–ª—É–≥–∏ –¥–µ–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å–≤–∞—Ç—Ç–∏–Ω–≥'
    else:
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram. –Ø –±—ã —Ö–æ—Ç–µ–ª –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å –æ\n–∫–∞–Ω–∞–ª–µ, –Ω–∞—Ä—É—à–∞—é—â–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏.\n{link}\n–ù–∞—Ä—É—à–µ–Ω–∏—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∂–∞–ª–æ–±—ã\n–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç—ã/–ø–æ—Å—Ç"



    senderemail, senderpassword = senders[0]
    subject = report_type
    recipient = "Abuse@telegram.org, spam@telegram.org, security@telegram.org, legal@telegram.org, support@telegram.org,sticker@telegram.org, stopCA@telegram.org, recover@telegram.org, DMCA@telegram.org"

    for sender_email, sender_password in senders:
        try:
            sendemail(senderemail, senderpassword, recipient, subject, text)
            sent_messages += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            failed_messages += 1

    bot.send_message(chat_id, f"‚úÖ–í—Å–µ –ø–∏—Å—å–º–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã‚úÖ\n"
                              f"‚ùå–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π‚ùå: {failed_messages}")


def sendemail(senderemail, senderpassword, recipient, subject, messagetext):
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(senderemail, senderpassword)

        message = MIMEMultipart()
        message['From'] = senderemail
        message['To'] = recipient
        message['Subject'] = subject

        body = messagetext
        message.attach(MIMEText(body, 'plain'))

        server.send_message(message)
        now = datetime.now()
        print(now.strftime("%H:%M:%S"))
        print(f"–ü–∏—Å—å–º–æ –æ—Ç {senderemail} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {recipient}.")
        server.quit()
    except Exception as e:
        print(f"–ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {e}")




senders = [
    ('deanonsword@gmail.com', 'mbugrov2006'),
	('avagicog66@gmail.com', 'owqu idec uewp rfar'),
	('enohegiti06@gmail.com', 'chij bdjt qpbc gslh'),
	('oxalewajopuv10@gmail.com', 'lrky cwmk ldfe zxzw'),
	('ebaxowofex65@gmail.com', 'ldwc sjte vuro oexf'),
	('osutokudu06@gmail.com', 'gscs ztmn suqx nnsb'),
    ('mifekafiza34@gmail.com', 'fita bzzs ujcc zcik'),
	('kawubadixen23@gmail.com', 'hwfl jsee jiuk wkab'),
	('ezezeludaz27@gmail.com', 'ofxg arpz brcd pyip'),
	('ziduqujukihu51@gmail.com', 'asza eial mrkc xdbh'),
    ('pagodegey076@gmail.com', 'vgkv ullp djyw fxil')
]
subjects = [
    '–î–ï–ê–ù–û–ù',
    '–°–í–ê–¢–ò–ù–ì',
    '–†–ê–°–ü–†–ê–í–´',
    '–ü–û–†–ù–û',
    '–ù–ê–ö–†–£–¢–ö–ê',
    '–°–ù–û–° –ü–†–ê–ô–°–ê',
    '–ù–ê–†–ö0–¢–ò–ö–ò',
    '–°–ù–û–° –ê–ö–ê–£–ù–¢–ê –ó–ê –í–ò–†–¢ –ù–û–ú–ï–†',
    '–°–ù–û–° –ê–ö–ê–£–ù–¢–ê –ó–ê –î–ï–ê–ù–û–ù/–°–í–ê–¢'
]

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_connect = UserDatabase('database/users.db')
    db_connect.connect()
    db_connect.create_table_user()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –æ–ø—Ä–æ—Å–µ
    bot.polling(none_stop=True)